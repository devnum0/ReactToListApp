{"ast":null,"code":"var _jsxFileName = \"/Users/kevinnmitchell/Desktop/React-TodoList/client/src/todo-form/TodoForm.jsx\";\nimport React, { Component } from 'react';\nconst url = \"http://localhost:4000/add\";\nconst options = {\n  method: 'post',\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  },\n  body: JSON.stringify({\n    name: name,\n    description: description,\n    status: status\n  })\n};\nexport default class TodoForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onNameChange = event => {\n      event.preventDefault();\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.onStatusChange = event => {\n      event.preventDefault();\n      this.setState({\n        status: event.target.value\n      });\n    };\n\n    this.onDescriptionChange = event => {\n      event.preventDefault();\n      this.setState({\n        description: event.target.value\n      });\n    };\n\n    this.getTodo = () => {\n      return this.get(url).then(data => data);\n    };\n\n    this.saveTodo = () => {\n      // const {name,description,status }= this.state;\n      return this.getTodo;\n    };\n\n    this.handleSubmit = e => {\n      const _this$state = this.state,\n            name = _this$state.name,\n            description = _this$state.description,\n            status = _this$state.status;\n      e.preventDefault();\n      let todo = this.saveTodo();\n      console.log(todo);\n      this.props.addTodo({\n        name: name,\n        description: description,\n        status: status\n      }); // if(todo){\n      //  console.log(todo._id)   \n      //     this.props.addTodo(todo);   \n      // }\n\n      this.setState({\n        name: '',\n        description: ''\n      });\n    };\n\n    this.nameInput = React.createRef();\n    this.descriptionInput = React.createRef();\n    this.statusInput = React.createRef();\n    this.state = {\n      name: '',\n      description: '',\n      status: '',\n      id: ''\n    };\n  }\n\n  get(url) {\n    return fetch(url, options).then(response => response.json());\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Todo Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.name,\n      onChange: this.onNameChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Todo Description\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.description,\n      onChange: this.onDescriptionChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"create todo\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/kevinnmitchell/Desktop/React-TodoList/client/src/todo-form/TodoForm.jsx"],"names":["React","Component","url","options","method","headers","body","JSON","stringify","name","description","status","TodoForm","constructor","props","onNameChange","event","preventDefault","setState","target","value","onStatusChange","onDescriptionChange","getTodo","get","then","data","saveTodo","handleSubmit","e","state","todo","console","log","addTodo","nameInput","createRef","descriptionInput","statusInput","id","fetch","response","json","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nconst url =\"http://localhost:4000/add\";\n\nconst options = {\n    method: 'post',\n    headers: {'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'},\n    \n    body: JSON.stringify({\n        name:name,\n        description:description,\n        status:status\n    })\n  };\n\n\nexport default class TodoForm extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.nameInput = React.createRef();\n        this.descriptionInput = React.createRef();\n        this.statusInput = React.createRef();\n\n        this.state = {\n            name: '',\n            description: '',\n            status:'',\n            id: '',\n        }\n    }\n\n    onNameChange = (event) => {\n        event.preventDefault();\n        this.setState({name: event.target.value});\n      }\n      onStatusChange = (event) => {\n        event.preventDefault();\n        this.setState({status: event.target.value});\n      }\n      \n      onDescriptionChange = (event) => {\n        event.preventDefault();\n        this.setState({description: event.target.value});\n      }\n\n      get(url) {\n        return fetch(url,options)\n          .then(response => response.json());\n      }\n\n      getTodo = () => {\n\n        return this.get(url)\n        .then(data => data);\n      }\n    saveTodo = () => {\n        // const {name,description,status }= this.state;\n    \n        return this.getTodo;\n    }\n\n\n    handleSubmit = e => {\n        const {name,description,status }= this.state;\n        \n        e.preventDefault();\n\n        let todo =  this.saveTodo();\n         console.log(todo)\n        this.props.addTodo({\n            name:name,\n            description:description,\n            status:status\n        });    \n        // if(todo){\n        //  console.log(todo._id)   \n        //     this.props.addTodo(todo);   \n        // }\n\n        this.setState({name:'',description:''})\n\n      };\n\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit} >\n                    {/* <label>Todo Name</label>\n                    <input type=\"text\" ref={this.nameInput}/>\n                    <label>Todo Description</label>\n                    <input type=\"text\" ref={this.descriptionInput} />\n                    {/* <label>Todo Name</label>\n                    <input type=\"text\" ref={this.descriptionInput}/> */}\n\n                    <label>Todo Name</label>\n                    <input type=\"text\" value={this.state.name} onChange={this.onNameChange}/>\n                    <label>Todo Description</label>\n                    <input type=\"text\" value={this.state.description} onChange={this.onDescriptionChange} />\n                    <button onClick={this.handleSubmit}>create todo</button>\n                </form>           \n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}